apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: {{ .Values.namespace }}
  labels:
    app: backend
spec:
  replicas: {{ .Values.backend.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: "{{ .Values.backend.image.pullPolicy }}"
          ports:
            - containerPort: {{ .Values.backend.port }}

          {{- with .Values.backend.envFromSecrets }}
          envFrom:
            {{- range $i, $item := . }}
            - secretRef:
                name: {{- if kindIs "string" $item -}}{{ $item }}{{- else -}}{{ index $item "name" }}{{- end }}
            {{- end }}
          {{- end }}

          readinessProbe:
            httpGet:
              path: {{ .Values.backend.probes.path }}
              port: {{ .Values.backend.port }}
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6

          livenessProbe:
            httpGet:
              path: {{ .Values.backend.probes.path }}
              port: {{ .Values.backend.port }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 2

          resources:
            requests:
              cpu: {{ .Values.backend.resources.requests.cpu }}
              memory: {{ .Values.backend.resources.requests.memory }}
            limits:
              cpu: {{ .Values.backend.resources.limits.cpu }}
              memory: {{ .Values.backend.resources.limits.memory }}
